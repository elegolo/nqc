{"name":"NQC","tagline":"NQC (Not Quite C) is a programming language for several LEGO MINDSTORMS products including the RCX, CyberMaster, and Scout. This is my own repo to capture my changes to the code as found on ","body":"NQC\r\n---\r\nNQC (Not Quite C) is a programming language for several LEGO MINDSTORMS\r\nproducts including the RCX, CyberMaster, and Scout.\r\n\r\nThis is my own repo to capture my changes to the code as found on\r\n<http://bricxcc.sourceforge.net/nqc/>\r\n\r\nThe original README from the NQC project follows.\r\n\r\nNQC Readme\r\n----------\r\n\r\nIf you have a problem, PLEASE CHECK THE FAQ:\r\n  <http://bricxcc.sourceforge.net/nqc/doc/faq.html>\r\n  \r\nSend bug reports to bricxcc@comcast.net.  Be sure to include details about what\r\nplatform you are running nqc on and a sample file that demonstrates the bug if\r\npossible.\r\n\r\nFor updates and additional documentation, visit the NQC Web Site:\r\n<http://bricxcc.sourceforge.net/nqc>\r\n\r\n\r\nNote to Windows Users\r\n---------------------\r\n\r\nNQC is a command line based tool - normally you run it by typing an\r\nappropriate command into an MS-DOS window.  There is no GUI for it and\r\nif you double-click the nqc.exe file an MS-DOS console will be created\r\nfor you, NQC will run within it, then since NQC finishes almost\r\nimmediately, the entire window will disappear.\r\n\r\nSome people prefer command line based tools because they allow you to\r\nuse the text editor of your choice, etc. It also makes for identical\r\nbehavior under Windows, Mac, and Linux. In order to use the command line\r\nversion of NQC you'll need to do two things:\r\n\r\n1) Use some sort of text editor (such as Notepad) to edit and save a\r\nsource file for NQC to compile.\r\n\r\n2) From an MS-DOS window type the appropriate NQC command. Its usually\r\nbest to either put all of your programs and nqc.exe in the same\r\ndirectory, or make sure the directory containing NQC is in your command\r\npath. \r\n\r\nIf any of the above seem either too confusing or too tedious, then you\r\nmay want to try the BricxCC which provides a familiar Windows style GUI on top\r\nof the standard NQC compiler.  You can download BricxCC here:\r\n\r\nhttp://bricxcc.sourceforge.net/\r\n\r\n\r\nGetting started\r\n---------------\r\n\r\nDownload the appropriate compiler (nqc or nqc.exe) and put it where\r\nyour shell can find it as a command.\r\n\r\nThe IR tower should be connected to your modem port (macintosh) or COM1\r\n(Win32/Linux). The IR tower should be set for \"near\" mode (small\r\ntriangle). The RCX should also be set for this mode, and firmware must\r\nalready be downloaded.\r\n\r\nCompile and download the test file using the following command line:\r\n\r\nnqc -d test.nqc\r\n\r\nThe test program assumes there's a motor on output A and a touch sensor\r\non input 1.  It turns on the motor and waits for the switch to be\r\npressed, then it turns off the motor and plays a sound.\r\n\r\nIf you are using a USB tower or a different serial port you will need to\r\nspecify the port either by adding a -Sx option (where x is the name of the\r\nport) to the command line or by setting the RCX_PORT environment variable.\r\n\r\nHere are some examples:\r\n\r\nUSB tower (where supported)\r\n\tnqc -Susb -d test.nqc\r\n\r\nWin32 COM2 port:\r\n\tset RCX_PORT=COM2\r\n\r\nWin32 USB port:\r\n\tset RCX_PORT=usb\r\n\t\r\nLinux:\r\n\tThe syntax for setting environment variables is shell specific.  By\r\n\tdefault nqcc uses \"/dev/ttyS0\" as the device name for the serial\r\n    port.  If you are using the second serial port, then \"/dev/ttyS1\"\r\n    should work.  Other device drivers may or may not work depending on if\r\n    they implement the expected ioctl's to setup the baud rate, parity,\r\n    etc.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}